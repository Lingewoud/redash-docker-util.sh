#!/usr/bin/env bash

#    __  __ ___ _   _ ___   __  __    _    _  _______
#   |  \/  |_ _| \ | |_ _| |  \/  |  / \  | |/ / ____|
#   | |\/| || ||  \| || |  | |\/| | / _ \ | ' /|  _|
#   | |  | || || |\  || |  | |  | |/ ___ \| . \| |___
#   |_|  |_|___|_| \_|___| |_|  |_/_/   \_\_|\_\_____|

## 1: MINIMAKE INIT. PLACE THIS IN THE TOP OF YOUR SCRIPT

COMMANDS=()
COMMAND_DESC=()

make_command() {
  COMMANDS+=($1)
  COMMAND_DESC+=("$2")
}

usage(){
  printf "Redash Docker Utility - helps installing redash docker environment\n"
  printf "Usage: %s [command]\n\nCommands:\n" $0
  line="                    "
  for (( i=0; i<=$(( ${#COMMANDS[*]} -1 )); i++ )); do
    printf "  %s %s ${COMMAND_DESC[$i]}\n" ${COMMANDS[$i]} "${line:${#COMMANDS[$i]}}"
  done
}


# This script setups dockerized Redash on Ubuntu 18.04.
set -eu

REDASH_BASE_PATH=/opt/redash

make_command "install_apt_packages" "packeges needed when running Ubuntu or Debian"
install_apt_packages(){
  sudo apt-get update
  sudo apt-get -yy install apt-transport-https ca-certificates curl software-properties-common wget pwgen
}

make_command "install_docker" "install docker when running Ubuntu"
install_docker(){
    # Install Docker
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    sudo apt-get update && sudo apt-get -y install docker-ce

    # Install Docker Compose
    sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose

    # Allow current user to run Docker commands
    sudo usermod -aG docker $USER
}

create_directories() {
    if [[ ! -e $REDASH_BASE_PATH ]]; then
        sudo mkdir -p $REDASH_BASE_PATH
        sudo chown $USER:$USER $REDASH_BASE_PATH
    fi

    if [[ ! -e $REDASH_BASE_PATH/postgres-data ]]; then
        mkdir $REDASH_BASE_PATH/postgres-data
    fi
}

create_config() {
    if [[ -e $REDASH_BASE_PATH/env ]]; then
        rm $REDASH_BASE_PATH/env
        touch $REDASH_BASE_PATH/env
    fi

    COOKIE_SECRET=$(pwgen -1s 32)
    SECRET_KEY=$(pwgen -1s 32)
    POSTGRES_PASSWORD=$(pwgen -1s 32)
    REDASH_DATABASE_URL="postgresql://postgres:${POSTGRES_PASSWORD}@postgres/postgres"

    echo "PYTHONUNBUFFERED=0" >> $REDASH_BASE_PATH/env
    echo "REDASH_LOG_LEVEL=INFO" >> $REDASH_BASE_PATH/env
    echo "REDASH_REDIS_URL=redis://redis:6379/0" >> $REDASH_BASE_PATH/env
    echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> $REDASH_BASE_PATH/env
    echo "REDASH_COOKIE_SECRET=$COOKIE_SECRET" >> $REDASH_BASE_PATH/env
    echo "REDASH_SECRET_KEY=$SECRET_KEY" >> $REDASH_BASE_PATH/env
    echo "REDASH_DATABASE_URL=$REDASH_DATABASE_URL" >> $REDASH_BASE_PATH/env
}

setup_redash_docker() {
    REQUESTED_CHANNEL=stable
    LATEST_VERSION=`curl -s "https://version.redash.io/api/releases?channel=$REQUESTED_CHANNEL"  | json_pp  | grep "docker_image" | head -n 1 | awk 'BEGIN{FS=":"}{print $3}' | awk 'BEGIN{FS="\""}{print $1}'`

    cd $REDASH_BASE_PATH
    REDASH_BRANCH="${REDASH_BRANCH:-master}" # Default branch/version to master if not specified in REDASH_BRANCH env var
    wget https://raw.githubusercontent.com/getredash/redash/${REDASH_BRANCH}/setup/docker-compose.yml
    sed -ri "s/image: redash\/redash:([A-Za-z0-9.-]*)/image: redash\/redash:$LATEST_VERSION/" docker-compose.yml
    sed -ri "s/80:80/8080:80/" docker-compose.yml
}

make_command "destroy" "kill and remove redash docker environment"
destroy_all(){
  sudo rm -Rfv $REDASH_BASE_PATH
  docker kill `docker ps | grep redash | cut -f1 -d" "` || echo "nothing to kill"
}

make_command "create" "(destroy), download, setup and start redash docker environment"
create(){
  destroy_all
  create_directories
  create_config
  setup_redash_docker
  start
  cd $REDASH_BASE_PATH && docker-compose run --rm server create_db
}

make_command "stop" "Stop redash in docker"
stop() {
  export COMPOSE_PROJECT_NAME=redash
  export COMPOSE_FILE=$REDASH_BASE_PATH/docker-compose.yml
  cd $REDASH_BASE_PATH && docker-compose stop
}

make_command "start" "(re)start redash in docker"
start() {
  export COMPOSE_PROJECT_NAME=redash
  export COMPOSE_FILE=$REDASH_BASE_PATH/docker-compose.yml
  cd $REDASH_BASE_PATH && docker-compose up -d
}

## 3:MINIMAKE EXECUTION. PLACE THIS AT THE BOTTOM OF YOUR SCRIPT
if test "$#" -eq 1 &&  [[ " ${COMMANDS[@]} " =~ $1 ]]; then
  eval "$1"
else
  usage
fi
